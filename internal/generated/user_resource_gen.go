// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package generated

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/booldefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/int64default"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"
	"regexp"
	"terraform-provider-redshift/internal/static"
	"terraform-provider-redshift/internal/validators"

	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
)

func UserResourceSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"connection_limit": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The maximum number of database connections the user is permitted to have open concurrently. The limit isn't enforced for superusers. Use the UNLIMITED keyword to permit the maximum number of concurrent connections. A limit on the number of connections for each database might also apply. For more information, see CREATE DATABASE. The default is UNLIMITED.",
				MarkdownDescription: "The maximum number of database connections the user is permitted to have open concurrently. The limit isn't enforced for superusers. Use the UNLIMITED keyword to permit the maximum number of concurrent connections. A limit on the number of connections for each database might also apply. For more information, see CREATE DATABASE. The default is UNLIMITED.",
				Validators: []validator.String{
					stringvalidator.Any(stringvalidator.RegexMatches(regexp.MustCompile(`^[1-9]+[0-9]*$`), `must be a positive non-zero value`), stringvalidator.OneOfCaseInsensitive(`UNLIMITED`)),
				},
				Default: stringdefault.StaticString("UNLIMITED"),
			},
			"createdb": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The CREATEDB (true) option allows the new user to create databases. The default is NOCREATEDB (false).",
				MarkdownDescription: "The CREATEDB (true) option allows the new user to create databases. The default is NOCREATEDB (false).",
				Default:             booldefault.StaticBool(false),
			},
			"createuser": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The CREATEUSER (true) option creates a superuser with all database privileges, including CREATE USER. The default is NOCREATEUSER (false). For more information, see superuser.",
				MarkdownDescription: "The CREATEUSER (true) option creates a superuser with all database privileges, including CREATE USER. The default is NOCREATEUSER (false). For more information, see superuser.",
				Default:             booldefault.StaticBool(false),
			},
			"external_id": schema.StringAttribute{
				Optional:            true,
				Description:         "The identifier for the user, which is associated with an identity provider. The user must have their password disabled. For more information, see Native identity provider (IdP) federation for Amazon Redshift.",
				MarkdownDescription: "The identifier for the user, which is associated with an identity provider. The user must have their password disabled. For more information, see Native identity provider (IdP) federation for Amazon Redshift.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "Built-in identifier",
				MarkdownDescription: "Built-in identifier",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the user to create. The user name can't be PUBLIC. For more information about valid names, see Names and identifiers.",
				MarkdownDescription: "The name of the user to create. The user name can't be PUBLIC. For more information about valid names, see Names and identifiers.",
				Validators: []validator.String{
					stringvalidator.NoneOfCaseInsensitive(`public`),
					stringvalidator.UTF8LengthBetween(1, 127),
					stringvalidator.NoneOfCaseInsensitive(static.ReservedWords...),
					stringvalidator.NoneOfCaseInsensitive(static.SystemColumnNames...),
					stringvalidator.RegexMatches(static.IdentifierValidCharacters, `must begin with an ASCII single-byte alphabetic character or underscore character, Subsequent characters can be ASCII single-byte alphanumeric characters, underscores, or dollar signs.`),
				},
			},
			"password": schema.StringAttribute{
				Optional:            true,
				Sensitive:           true,
				Description:         "Sets the user's password. By default, users can change their own passwords, unless the password is disabled. To disable a user's password, omit a value. When a user's password is disabled, the password is deleted from the system and the user can log on only using temporary AWS Identity and Access Management (IAM) user credentials. For more information, see Using IAM Authentication to Generate Database User Credentials.",
				MarkdownDescription: "Sets the user's password. By default, users can change their own passwords, unless the password is disabled. To disable a user's password, omit a value. When a user's password is disabled, the password is deleted from the system and the user can log on only using temporary AWS Identity and Access Management (IAM) user credentials. For more information, see Using IAM Authentication to Generate Database User Credentials.",
			},
			"session_timeout": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "The maximum time in seconds that a session remains inactive or idle. The range is 60 seconds (one minute) to 1,728,000 seconds (20 days), or 0 to not set a timeout. If no session timeout is set for the user, the cluster setting applies. For more information, see Quotas and limits in Amazon Redshift in the Amazon Redshift Management Guide.",
				MarkdownDescription: "The maximum time in seconds that a session remains inactive or idle. The range is 60 seconds (one minute) to 1,728,000 seconds (20 days), or 0 to not set a timeout. If no session timeout is set for the user, the cluster setting applies. For more information, see Quotas and limits in Amazon Redshift in the Amazon Redshift Management Guide.",
				Validators: []validator.Int64{
					int64validator.Between(60, 172800),
				},
				Default: int64default.StaticInt64(0),
			},
			"syslog_access": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "A clause that specifies the level of access the user has to the Amazon Redshift system tables and views. If RESTRICTED is specified, the user can see only the rows generated by that user in user-visible system tables and views. The default is RESTRICTED. If UNRESTRICTED is specified, the user can see all rows in user-visible system tables and views, including rows generated by another user. UNRESTRICTED doesn't give a regular user access to superuser-visible tables. Only superusers can see superuser-visible tables.",
				MarkdownDescription: "A clause that specifies the level of access the user has to the Amazon Redshift system tables and views. If RESTRICTED is specified, the user can see only the rows generated by that user in user-visible system tables and views. The default is RESTRICTED. If UNRESTRICTED is specified, the user can see all rows in user-visible system tables and views, including rows generated by another user. UNRESTRICTED doesn't give a regular user access to superuser-visible tables. Only superusers can see superuser-visible tables.",
				Validators: []validator.String{
					stringvalidator.OneOf(`RESTRICTED`, `UNRESTRICTED`),
					validators.SyslogAccessValidator(),
				},
				Default: stringdefault.StaticString("RESTRICTED"),
			},
			"valid_until": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The VALID UNTIL option sets an absolute time after which the user's password is no longer valid. By default the password has no time limit ('infinity').",
				MarkdownDescription: "The VALID UNTIL option sets an absolute time after which the user's password is no longer valid. By default the password has no time limit ('infinity').",
				Validators: []validator.String{
					stringvalidator.Any(stringvalidator.OneOf(`infinity`), validators.Iso8601Validator()),
				},
				Default: stringdefault.StaticString("infinity"),
			},
		},
	}
}

type UserModel struct {
	ConnectionLimit types.String `tfsdk:"connection_limit"`
	Createdb        types.Bool   `tfsdk:"createdb"`
	Createuser      types.Bool   `tfsdk:"createuser"`
	ExternalId      types.String `tfsdk:"external_id"`
	Id              types.String `tfsdk:"id"`
	Name            types.String `tfsdk:"name"`
	Password        types.String `tfsdk:"password"`
	SessionTimeout  types.Int64  `tfsdk:"session_timeout"`
	SyslogAccess    types.String `tfsdk:"syslog_access"`
	ValidUntil      types.String `tfsdk:"valid_until"`
}
