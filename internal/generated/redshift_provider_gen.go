// Code generated by terraform-plugin-framework-generator DO NOT EDIT.

package generated

import (
	"context"
	"github.com/hashicorp/terraform-plugin-framework-validators/int64validator"
	"github.com/hashicorp/terraform-plugin-framework-validators/stringvalidator"
	"github.com/hashicorp/terraform-plugin-framework/schema/validator"
	"github.com/hashicorp/terraform-plugin-framework/types"

	"github.com/hashicorp/terraform-plugin-framework/provider/schema"
)

func RedshiftProviderSchema(ctx context.Context) schema.Schema {
	return schema.Schema{
		Attributes: map[string]schema.Attribute{
			"dbname": schema.StringAttribute{
				Required:            true,
				Description:         "dbname",
				MarkdownDescription: "dbname",
				Validators: []validator.String{
					stringvalidator.LengthAtLeast(5),
				},
			},
			"host": schema.StringAttribute{
				Required:            true,
				Description:         "host",
				MarkdownDescription: "host",
			},
			"password": schema.StringAttribute{
				Required:            true,
				Sensitive:           true,
				Description:         "password",
				MarkdownDescription: "password",
			},
			"port": schema.Int64Attribute{
				Required:            true,
				Description:         "port",
				MarkdownDescription: "port",
				Validators: []validator.Int64{
					int64validator.AtLeast(0),
				},
			},
			"sslmode": schema.StringAttribute{
				Optional:            true,
				Description:         "For allowed values and their descriptions, see https://www.postgresql.org/docs/11/libpq-ssl.html#LIBPQ-SSL-PROTECTION",
				MarkdownDescription: "For allowed values and their descriptions, see https://www.postgresql.org/docs/11/libpq-ssl.html#LIBPQ-SSL-PROTECTION",
				Validators: []validator.String{
					stringvalidator.OneOf("disable", "allow", "prefer", "require", "verify-ca", "verify-full"),
				},
			},
			"username": schema.StringAttribute{
				Required:            true,
				Description:         "Username",
				MarkdownDescription: "Username",
			},
			"timeout": schema.Int64Attribute{
				Optional:            true,
				Description:         "Timeout in seconds. Maximum time to wait while connecting and query execution in seconds. Zero or not specified means wait indefinitely.",
				MarkdownDescription: "Timeout in seconds. Maximum time to wait while connecting and query execution in seconds. Zero or not specified means wait indefinitely.",
				Validators: []validator.Int64{
					int64validator.AtLeast(0),
				},
			},
			"application_name": schema.StringAttribute{
				Optional:            true,
				Description:         "The name of the application",
				MarkdownDescription: "The name of the application",
			},
		},
	}
}

type RedshiftModel struct {
	Dbname   types.String `tfsdk:"dbname"`
	Host     types.String `tfsdk:"host"`
	Password types.String `tfsdk:"password"`
	Port     types.Int64  `tfsdk:"port"`
	Sslmode  types.String `tfsdk:"sslmode"`
	Username types.String `tfsdk:"username"`
	Timeout  types.Int64  `tfsdk:"timeout"`
	ApplicationName types.String `tfsdk:"application_name"`
}
